;(function(root) { // 글로벌 함수 선언

    'use strict';

    root.detectMobile = root.detectMobile || function() {
        var check = false;
        (function (a) {
            if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
        })(navigator.userAgent || navigator.vendor || window.opera);
        return check;
    }

})(this);

;(function($, window, document, undefined) {

    'use strict';

    var isMobile = isMobile || detectMobile();

    var root = (function(g) { // global 셋업
        return g;
    })(this);

    var $document = $document || $(document);

    var BaseElasticMove = function(elements, options) { // 마우스에 이끌리는 효과

        var _setting = {
            wrapEl: '.elastic-wrap', // wrapper 엘리먼트 안에서만 동작 (distance 는 무시)
            speedIn: 0.8,
            speedOut: 1.2,
            distance: 25 // 대상과의 거리, 엘리먼트 절반 크기보다 조금 더 큰 것을 권장
        };

        var opts = $.extend({}, _setting, options);

        var base = {};

        var timerRecover = null; // 복원 타이머
        var isWrapMode = false; // wrap 엘리먼트가 있으면

        var getProps = function(_el, _eventX, _eventY){ // item prop 구하기
            var _width = _el.width(),
                _height = _el.height(),
                _halfSize = parseInt(_el.width() / 2, 10),
                _offset = _el.offset();
            var _result = {
                x: _offset.left + _halfSize,
                y: _offset.top + _halfSize,
                width: _width,
                height: _height
            };
            return _result;
        };

        var getWrapProps = function(){ // wrapper 있을 경우 prop 구하기
            var _result = {},
                $wrap = base.$wrap,
                _offset = $wrap.offset();
            _result = {
                top: _offset.top,
                left: _offset.left,
                centerX: _offset.left + ($wrap.width() / 2),
                centerY: _offset.top + ($wrap.height() / 2),
                right: _offset.left + $wrap.width(),
                bottom: _offset.top + $wrap.height()
            }
            return _result;
        };

        var recover = function(_el){ // 원위치로
            TweenMax.to(_el, opts.speedOut, {
                x: 0,
                y: 0
            });
        };

        function recoverAll(){ // 모두 원위치로
            for (var j = 0; j < base.itemLength; j++) {
                recover(base.$el);
            }
            if (isWrapMode === true) {
                base.$wrap.attr('data-elastic-wrap', 'out');
            }
        }

        var padderX = 30;
        var padderY = 300; // 추가 여백

        function moveWrapMode (e, $item, _wrapCtx){ // wrap mode mouse move

            var _boolOut = e.x < _wrapCtx.left - padderX ||  // 영역 밖에 있는지
                e.x > _wrapCtx.right + padderX ||
                e.y < _wrapCtx.top - padderY ||
                e.y > _wrapCtx.bottom + padderY;

            if (_boolOut !== true) { // in

                var _distWrapMode = {
                    x: _wrapCtx.centerX - e.x + ($item.width()/2),
                    y: _wrapCtx.centerY - e.y
                };
                base.$wrap.attr('data-elastic-wrap', 'in');
                TweenMax.to($item, opts.speedIn, {
                    x: - Math.round(_distWrapMode.x),
                    y: - Math.round(_distWrapMode.y)
                });

            } else { // out

                base.$wrap.attr('data-elastic-wrap', 'out');
                recover($item);

            }
        };

        function moveSingleMode(e, $item) { // single mode mouse move

            var _pointerScope = ($item.data('elastic-distance')) ? $item.data('elastic-distance') : opts.distance; // 반응 범위
            var _props = getProps($item, e);

            var _distance = {
                x: _props.x - e.x,
                y: _props.y - e.y
            };

            var _dist = Math.sqrt(_distance.x * _distance.x + _distance.y * _distance.y); // offset center와의 거리

            if (_dist < _pointerScope) {
                TweenMax.to($item, opts.speedIn, {
                    x: - Math.round(_distance.x),
                    y: - Math.round(_distance.y)
                });
            } else {
                recover($item);
            }
        }

        var handler = {
            onMouseMove: function(e){
                clearTimeout(timerRecover);
                var _e = {
                    x: e.pageX,
                    y: e.pageY
                };
                for (var i = 0; i < base.itemLength; i++) {
                    var $item = base.$el.eq(i);
                    if (isWrapMode === true) { // wrap 모드
                        moveWrapMode(_e, $item, getWrapProps());
                    } else { // 단독모드
                        moveSingleMode(_e, $item);
                    }
                }
            },
            onMouseLeave: function(e){ // 마우스 벗어났을때
                if (e.clientY <= 0 || e.clientX <= 0 || (e.clientX >= window.innerWidth || e.clientY >= window.innerHeight)) {
                    timerRecover = setTimeout(function(){
                        recoverAll();
                    }, 500);
                }
            }
        }

        function init(){

            if (isMobile === true) return false; // 모바일 일때 중단

            base = {
                $el: (typeof elements == 'string') ? $(elements) : elements, // 대상 지정
                $wrap: null,
                isWrapEl: false
            };

            base.itemLength = base.$el.length;

            if (!base.itemLength) return false;

            base.$wrap = (typeof opts.wrapEl == 'string') ? $(opts.wrapEl) : opts.wrapEl;

            isWrapMode = (base.$wrap.length > 0); // wrap 엘리먼트가 있으면

            $document.on('mousemove', handler.onMouseMove); // set handlder
            $document.on('mouseleave', handler.onMouseLeave);

        }

        init();

        return {
            init: init,
            recover: recoverAll
        };

    };

    $.fn.plugin = function(options) { // jquery 플러그인 생성
        return this.each(function() {
            new BaseElasticMove(this, options);
        });
    };

    window.BaseElasticMove = BaseElasticMove; // set global func

})(jQuery, window, document);

$(function(){

    var $document = $(document), // dom 캐쉬
        $window = $(window),
        $html = $('html'),
        $body = $('body');

    var setTopButton = (function(){ // 페이지 위로 탑 버튼 생성

        var _html = '<div id="topButton"><a href="#top"><span><i><em>페이지 위로</em></i></span></a></div>';
        var $topButton = $(_html).appendTo($('body'));

        $topButton.on('click', function(e) {
            e.preventDefault();
            var $this = $(e.target);
            $this = $this.is('a') ? $this : $this.closest('a');
            $this.addClass('is-clicked');
            $('html, body').stop().animate({
                'scrollTop': 0
            }, 300, function(){
                $this.removeClass('is-clicked');
            });
        });

        var moveTopButton = new BaseElasticMove($topButton.find('a'), { // 마우스에 이끌리는 효과
            distance: 80
        });

    })();

    var movePageNavigation = new BaseElasticMove('.page-sub .follow', { // 상세페이지 하단
        wrapEl: $('.page-navigation'),
        distance: 80
    });

    /* 이하 생략
    var scrollTop = 0;
    var isScrollDowned = false;
    var _prevScroll = -1;

    $window.on('load scroll resize', function() {
        scrollTop = $window.scrollTop();
        isScrollDowned = (scrollTop >= 10);
        $html.toggleClass('is-scroll-downed', isScrollDowned);
        var _scrollUp = (_prevScroll > scrollTop);
        _prevScroll = scrollTop;
        $html.toggleClass('is-scroll-up', _scrollUp);
        $html.toggleClass('is-scroll-down', !_scrollUp && scrollTop > 50);
    });
    */

});
